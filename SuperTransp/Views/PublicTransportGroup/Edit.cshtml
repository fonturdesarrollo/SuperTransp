@using SuperTransp.Utils
@model SuperTransp.Models.PublicTransportGroupViewModel
@{
	Layout = "";
}
<!DOCTYPE HTML>
<html>
<head>
	<title>Modificar Organización de Transporte</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
	<link rel="stylesheet" href="~/assets/css/main.css" />
	<noscript><link rel="stylesheet" href="~/assets/css/noscript.css" /></noscript>
	<link rel="stylesheet" href="~/datatable/css/bootstrap.css" />
	<link rel="icon" type="image/x-icon" href="~/images/Logo.ico" />

	<!-- Bootstrap JS (con Popper incluido para el Modal) -->
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
	<script>
		const patterns = @Html.Raw(Json.Serialize(ViewBag.DesignationList));
	</script>

	<style>
		.is-invalid {
			border: 2px solid red;
			background-color: #ffe6e6;
		}
		body.modal-open {
			overflow: auto !important;
		}

		.modal {
			z-index: 1050 !important;
		}

		.ui-autocomplete {
			max-height: 200px;
			overflow-y: auto;
			overflow-x: hidden;
			z-index: 10000 !important;
		}
	</style>
	<!-- jQuery UI CSS -->
	<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" />

	<!-- jQuery -->
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

	<!-- jQuery UI -->
	<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
</head>
<body class="is-preload">
	@{
		bool isTotalAccess = ViewBag.IsTotalAccess != null && ViewBag.IsTotalAccess is bool && ViewBag.IsTotalAccess == true;
	}
	@using (Html.BeginForm("Edit", "PublicTransportGroup", FormMethod.Post))
	{
		@Html.AntiForgeryToken()
		<!-- Wrapper -->
		<div id="wrapper">

			<!-- Header -->
			<header id="header">
				<div class="inner">

					<!-- Logo -->
					<a href="#" class="logo">
						<span><img src="~/images/Logo.png" width="100px" height="100px" alt="" /></span>
						<br />
						<span class="title">@ViewBag.EmployeeName</span>
						<br />
						@if (TempData["SuccessMessage"] != null)
						{
							<div id="successMessage" class="alert alert-success">
								@TempData["SuccessMessage"]
							</div>
						}
					</a>
				</div>
				<!-- Nav -->
				<nav>
					<ul>
						<li><a href="#menu">Menu</a></li>
					</ul>
				</nav>
			</header>

			<!-- Menu -->
			<nav id="menu">
				<h2>Menu</h2>
				<ul>
					<li>@Html.ActionLink("Inicio", "Index", "Home")</li>
					<li>@Html.ActionLink("Agregar organización", "Add", "PublicTransportGroup")</li>
					<li>@Html.ActionLink("Modificar organización", "PublicTransportGroupList", "PublicTransportGroup")</li>
					<li>
					<li>
						@Html.ActionLink(
							"Agregar socios a organización",
							"Add",
							"Driver",
							new { publicTransportGroupId = @Model.PublicTransportGroupId, pTGCompleteName = @Model.PTGCompleteName },
							null
						)
					</li>
					<li>@Html.ActionLink("Organizaciones de transporte", "Index", "PublicTransportGroup")</li>
					<li>@Html.ActionLink("Salir", "Login", "Security")</li>
				</ul>
			</nav>

			<!-- Main -->
			<div id="main">
				<div class="inner">
					<!-- Form -->
					<section>
						<h1 style="color:#4cbece">Modificar organización de transporte</h1>
						<br />
						<br />
						<div class="row gtr-uniform">
							<div class="col-6">
								<strong>RIF:</strong>
								@Html.HiddenFor(x => x.PublicTransportGroupIdModifiedDate)
								@Html.HiddenFor(x => x.PublicTransportGroupId)
								@Html.HiddenFor(x => x.PublicTransportGroupGUID)
								@Html.TextBoxFor(x => x.PublicTransportGroupRif, new { placeholder = "RIF", tabindex = "0", maxlength = "10" })
								<span asp-validation-for="PublicTransportGroupRif" class="text-danger"></span>
							</div>
							<div class="col-12">
								<strong>Entidad legal:</strong>
								@Html.TextBox("DesignationName", null, new { @class = "form-control", @id = "designationInput", placeholder = "-- Seleccione o escriba para buscar --" })
								@Html.HiddenFor(t => t.DesignationId)
							</div>
							<div class="col-12">
								<strong>Nombre:</strong>
								@Html.TextBoxFor(x => x.PublicTransportGroupName, new { placeholder = "Nombre de la organización de transporte", maxlength = "100" })
								<span asp-validation-for="PublicTransportGroupName" class="text-danger"></span>
							</div>
							<div class="col-6 col-12-xsmall">
								<strong>Estado:</strong>
								@Html.DropDownListFor(t => t.StateId, (SelectList)ViewBag.States, "-- Seleccione el estado --", new { @class = "form-control" })
							</div>
							<div class="col-6 col-12-xsmall">
								<strong>Municipio:</strong>
								@Html.DropDownListFor(t => t.MunicipalityId, (SelectList)ViewBag.Municipality, "-- Seleccione el municipio --", new { @class = "form-control" })
							</div>
							<div class="col-6 col-12-xsmall">
								<strong>Modalidad:</strong>
								@Html.DropDownListFor(t => t.ModeId, (SelectList)ViewBag.Mode, "-- Seleccione la modalidad --", new { @class = "form-control" })
							</div>
							<div class="col-6 col-12-xsmall">
								<strong>Gremio o Sindicato:</strong>
								@* @Html.DropDownListFor(t => t.UnionId, (SelectList)ViewBag.Union, "-- Seleccione --", new { @class = "form-control" }) *@
								@Html.DropDownListFor(t => t.UnionId, (SelectList)ViewBag.Union, "-- Seleccione el gremio --", new { @class = "form-control" })
@* 								<select id="UnionId" name="UnionId" class="form-control">
									<option value="">Seleccione un gremio</option>
								</select> *@
							</div>
							<div class="col-6">
								<strong>Cédula Representante:</strong>
								@Html.TextBoxFor(x => x.RepresentativeIdentityDocument, new { placeholder = "Cédula Representante", maxlength = "8" })
								<span asp-validation-for="RepresentativeIdentityDocument" class="text-danger"></span>
							</div>
							<div class="col-6">
								<strong>Nombre Representante:</strong>
								@Html.TextBoxFor(x => x.RepresentativeName, new { placeholder = "Nombre del Representante", maxlength = "50" })
								<span asp-validation-for="RepresentativeName" class="text-danger"></span>
							</div>
							<div class="col-6">
								<strong>Teléfono Representante:</strong>
								@Html.TextBoxFor(x => x.RepresentativePhone, new { placeholder = "Teléfono del Representante", maxlength = "11" })
								<span asp-validation-for="RepresentativePhone" class="text-danger"></span>
							</div>
							<div class="col-6">
								<strong>Cupo:</strong>
								@Html.TextBoxFor(x => x.Partners, new { placeholder = "Cantidad de Socios", maxlength = "3" })
								<span asp-validation-for="Partners" class="text-danger"></span>
							</div>
							<div class="col-12">
								<ul class="actions">
									@{
										if (ViewBag.IsTotalAccess)
										{
											<li><button type="submit" id="saveRequest" class="primary">Actualizar</button></li>
										}
									}
										<li><button type="button" id="generateQR" >Generar QR</button></li>
								</ul>
							</div>
						</div>
					</section>
				</div>
			</div>
		</div>
	}

	<!-- Modal -->
	<div class="modal fade" id="qrModal" tabindex="-1" aria-labelledby="qrModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Código QR</h5>
					<button type="button" class="close" data-bs-dismiss="modal">&times;</button>
				</div>
				<div class="modal-body text-center">
					<img id="qrImage" src="" alt="Código QR" class="img-fluid" />
				</div>
			</div>
		</div>
	</div>

	<!-- Scripts -->
	<script src="~/assets/js/browser.min.js"></script>
	<script src="~/assets/js/breakpoints.min.js"></script>
	<script src="~/assets/js/util.js"></script>
	<script src="~/assets/js/main.js"></script>
	<script src="~/js/common.js" asp-append-version="true"></script>
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script type="text/javascript">

		document.addEventListener("DOMContentLoaded", function () {
			var inputElement = document.querySelector("[name='PublicTransportGroupRif']");

			inputElement.addEventListener("input", function () {
				var value = inputElement.value;

				if (value.length > 0 && !/^[JjVv]/.test(value[0])) {
					value = "J" + value;
				}

				value = value.replace(/[^JjVv0-9]/g, "");

				if (/^[Jj]/.test(value)) {
					value = "J" + value.slice(1);
				} else if (/^[Vv]/.test(value)) {
					value = "V" + value.slice(1);
				}

				if (value.length > 1 && /^[JV]/.test(value[0])) {
					value = value[0] + value.slice(1).replace(/[JV]/gi, "");
				}

				inputElement.value = value;
			});
		});

		document.addEventListener("DOMContentLoaded", function () {
			function handleInput(selector, transformFunction) {
				const inputElement = document.querySelector(selector);
				if (inputElement) {
					inputElement.addEventListener("input", function () {
						const start = inputElement.selectionStart;
						const end = inputElement.selectionEnd;

						const transformed = transformFunction(inputElement.value);

						if (inputElement.value !== transformed) {
							inputElement.value = transformed;
							inputElement.setSelectionRange(start, end);
						}
					});
				}
			}

			handleInput("[name='PublicTransportGroupName']", sanitizeInputValue);
			handleInput("[name='RepresentativeName']", sanitizeInputValue);

			handleInput("[name='RepresentativeIdentityDocument']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});

			handleInput("[name='RepresentativePhone']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});

			handleInput("[name='Partners']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});
		});

		$("body").on("click", "#saveRequest", function (event) {
			event.preventDefault();

			if (!isOkToSave()) {
				return false;
			}

			if (!confirm("¿Está seguro de que desea actualizar los registros?")) {
				return false;
			}

			$(this).closest("form").trigger("submit");
		});

		$("form").on("submit", function (e) {
			e.preventDefault();

			if ($(this).valid()) {
					var paramValue1 = $('#PublicTransportGroupRif').val();
					var paramValue2 = $('#PublicTransportGroupId').val();
					var paramValue3 = $('#Partners').val();
				    var checkExistingUrl = '@Url.Action("CheckRifExistOnEdit", "PublicTransportGroup")';

				$.ajax({
					url: checkExistingUrl,
					data: {
						paramValue1: paramValue1,
						paramValue2: paramValue2,
						paramValue3:paramValue3,
					},
					success: function (data) {
						showMsg(data);
					},
					cache: false
				});
			}
		});

		function isOkToSave() {
			let firstInvalidField = null;
			let message = "";
			const isTotalAccess = @isTotalAccess.ToString().ToLower();

			if (!isTotalAccess) {
				showAlert("No tiene permiso de modificar registros.", null);
				return false;
			}

			const rifValue = $("#PublicTransportGroupRif").val();
			if (!rifValue && !firstInvalidField) {
				firstInvalidField = "#PublicTransportGroupRif";
				message = "Debe colocar el RIF";
			} else if (rifValue.includes("J") && rifValue.replace(/\D/g, "").length < 9 && !firstInvalidField) {
				firstInvalidField = "#PublicTransportGroupRif";
				message = "Debe colocar un RIF válido";
			}

			const typedName = $("#designationInput").val();
			const matchedItem = window.designations.find(item => item.label === typedName);
			if (!matchedItem && !firstInvalidField) {
				firstInvalidField = "#designationInput";
				message = "Debe seleccionar una entidad legal válida de la lista.";
			}

			const orgName = $("#PublicTransportGroupName").val().trim();
			if (!orgName && !firstInvalidField) {
				firstInvalidField = "#PublicTransportGroupName";
				message = "Debe colocar el nombre de la organización";
			} else {
				const regex = /^[a-zA-ZñÑ0-9\s]{5,}$/;
				if (!regex.test(orgName) && !firstInvalidField) {
					firstInvalidField = "#PublicTransportGroupName";
					message = "El nombre debe contener solo letras, números y espacios, y al menos 5 caracteres.";
			 }
				const inputUpper = orgName.toUpperCase();
				if (patterns.some(pref => inputUpper.startsWith(pref)) && !firstInvalidField) {
					firstInvalidField = "#PublicTransportGroupName";
					message = "Seleccione la entidad legal desde la lista, no la escriba en el nombre.";
				}
			}

			const requiredDropdowns = [
				{ id: "#StateId", msg: "Debe seleccionar el estado" },
				{ id: "#MunicipalityId", msg: "Debe seleccionar el municipio" },
				{ id: "#ModeId", msg: "Debe seleccionar la modalidad" },
				{ id: "#UnionId", msg: "Debe seleccionar el gremio o sindicato" },
			];

			for (const field of requiredDropdowns) {
				if ($(field.id).val() === "" && !firstInvalidField) {
					firstInvalidField = field.id;
					message = field.msg;
				}
			}

			const identityDoc = $("#RepresentativeIdentityDocument").val();
			if ((!identityDoc || identityDoc.length < 7) && !firstInvalidField) {
				firstInvalidField = "#RepresentativeIdentityDocument";
				message = "Debe colocar un número de cédula válido";
			}

			const repName = $("#RepresentativeName").val().trim();
			if (!repName && !firstInvalidField) {
				firstInvalidField = "#RepresentativeName";
				message = "Debe colocar el nombre del representante";
			} else {
				const regex = /^[a-zA-ZñÑ\s]{5,}$/;
				if (!regex.test(repName) && !firstInvalidField) {
					firstInvalidField = "#RepresentativeName";
					message = "El nombre debe contener solo letras y espacios, y al menos 5 caracteres.";
				}
			}

			const phone = $("#RepresentativePhone").val();
			if ((!phone || phone.length < 11) && !firstInvalidField) {
				firstInvalidField = "#RepresentativePhone";
				message = "Debe colocar un número de teléfono válido";
			}

			const partners = $("#Partners").val();
			if (partners === "" && !firstInvalidField) {
				firstInvalidField = "#Partners";
				message = "Debe colocar el cupo";
			} else if (partners === "0" && !firstInvalidField) {
				firstInvalidField = "#Partners";
				message = "El cupo no puede ser cero";
			}

			if (firstInvalidField) {
				showAlert(message, firstInvalidField);
				return false;
			}

			return true;
		}

		function showAlert(message, selector) {
			alert(message);

			if (selector) {
				const $field = $(selector);
				$field.addClass("is-invalid");

				$field.on("input", function () {
					$(this).removeClass("is-invalid");
				});

				setTimeout(() => {
					$field[0].scrollIntoView({ behavior: "smooth", block: "center" });
					$field.focus();
				}, 100);
			}
		}

		function highlightErrorField(selector) {
			$(selector).addClass("is-invalid");
			$(selector).on("input", function () {
				$(this).removeClass("is-invalid");
			});

			$(selector)[0].scrollIntoView({ behavior: "smooth", block: "center" });
		}

		function showMsg(hasCurrentJob) {
			if (hasCurrentJob != "OK") {
				alert(hasCurrentJob);
				return false;
			} else {

				$("form").unbind('submit').submit();
			}
		}

		$(document).ready(function () {

			setTimeout(function(){
				$("#successMessage").fadeOut("slow");
			}, 2500);

			// $('#PublicTransportGroupName').on('input', function() {
			// 	const value = $(this).val();
			// 	const sanitizedValue = value.replace(/[^a-zA-ZñÑ0-9\s]/g, '');
			// 	$(this).val(sanitizedValue);
			// });

			// $('#RepresentativeName').on('input', function() {
			// 	const value = $(this).val();
			// 	const sanitizedValue = value.replace(/[^a-zA-Z\s]/g, '');
			// 	$(this).val(sanitizedValue);
			// });


			$('#StateId').change(function () {
				var stateId = $(this).val();
				var getMunicipalityUrl = '@Url.Action("GetMunicipality", "PublicTransportGroup")';
				var getUnionUrl = '@Url.Action("GetUnion", "PublicTransportGroup")';

				$('#MunicipalityId').empty().append('<option value="">Seleccione un municipio</option>');
				$('#UnionId').empty().append('<option value="">Seleccione un gremio</option>');

				if (stateId) {
					$.getJSON(getMunicipalityUrl, { stateId: stateId }, function (data) {
						$.each(data, function (index, municipality) {
							$('#MunicipalityId').append($('<option>', {
								value: municipality.municipalityId,
								text: municipality.municipalityName
							}));
						});
					});

					$.getJSON(getUnionUrl, { stateId: stateId }, function (data) {
						$.each(data, function (index, union) {
							$('#UnionId').append($('<option>', {
								value: union.unionId,
								text: union.unionName
							}));
						});
					});
				}
			});

			// $('#StateId').change(function () {
			// 	var stateId = $(this).val();
			// 	var getMunicipalityUrl = '@Url.Action("GetMunicipality", "PublicTransportGroup")';
			// 	$('#MunicipalityId').empty().append('<option value="">Seleccione un municipio</option>');

			// 	if (stateId) {
			// 		$.getJSON(getMunicipalityUrl, { stateId: stateId }, function (data) {
			// 			$.each(data, function (index, municipality) {
			// 				$('#MunicipalityId').append($('<option>', {
			// 					value: municipality.municipalityId,
			// 					text: municipality.municipalityName
			// 				}));
			// 			});
			// 		});
			// 	}
			// });	

			$("#generateQR").click(function () {
				var ptgGUID = $('#PublicTransportGroupGUID').val();
				var generateQRUrl = '@Url.Action("GenerateQR", "PublicTransportGroup")';

				$.ajax({
					url: generateQRUrl,
					type: "POST",
					headers: {
						"RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
					},
					contentType: "application/json",
					data: JSON.stringify({ ptgGUID: ptgGUID }),
					success: function (response) {
						$("#qrImage").attr("src", response.qrImage);
						var myModal = new bootstrap.Modal(document.getElementById('qrModal'));
						myModal.show();
					},
					error: function () {
						alert("Error al generar el código QR.");
					}
				});
			});

			$(function () {
				window.designations = [];
				@foreach (var item in (SelectList)ViewBag.Designation)
				{
					@:window.designations.push({label: "@Html.Raw(item.Text)", value: "@item.Value" });
				}

				$("#designationInput").autocomplete({
					source: window.designations,
					minLength: 0,
					autoFocus: true,
					select: function (event, ui) {
						$("#designationInput").val(ui.item.label);
						$("#DesignationId").val(ui.item.value);
						return false;
					}
				});

				$("#designationInput").on("focus click", function () {
					$(this).autocomplete("search", "");
				});

				$("#designationInput").on("input", function () {
					const typed = $(this).val();
					const match = window.designations.find(item => item.label === typed);
					if (!match) {
						$("#DesignationId").val("");
					}
				});
			});
		});
	</script>
</body>
</html>


