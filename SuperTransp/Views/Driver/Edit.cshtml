@model SuperTransp.Models.DriverViewModel
@{
	Layout = "";
}
<!DOCTYPE HTML>
<html>
<head>
	<title>Modificar Socio</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
	<link rel="stylesheet" href="~/assets/css/main.css" />
	<noscript><link rel="stylesheet" href="~/assets/css/noscript.css" /></noscript>
	<link rel="stylesheet" href="~/datatable/css/bootstrap.css" />
	<link rel="icon" type="image/x-icon" href="~/images/Logo.ico" />

	@* Air DatePicker ******************************************************************************* *@
	<link href="~/plugins/airdatepicker/air-datepicker.min.css" rel="stylesheet" />
	@* *************************************************************************************************** *@

	<style>
		.is-invalid {
			border: 2px solid red;
			background-color: #ffe6e6;
		}
	</style>
</head>
<body class="is-preload">
	@using (Html.BeginForm("Edit", "Driver", FormMethod.Post))
	{
		@Html.AntiForgeryToken()
		<!-- Wrapper -->
		<div id="wrapper">

			<!-- Header -->
			<header id="header">
				<div class="inner">

					<!-- Logo -->
					<a href="#" class="logo">
						<span><img src="~/images/Logo.png" width="100px" height="100px" alt="" /></span>
						<br />
						<span class="title">@ViewBag.EmployeeName</span>
						<br />
						@if (TempData["SuccessMessage"] != null)
						{
							<div id="successMessage" class="alert alert-success">
								@TempData["SuccessMessage"]
							</div>
						}
					</a>
				</div>
				<!-- Nav -->
				<nav>
					<ul>
						<li><a href="#menu">Menu</a></li>
					</ul>
				</nav>
			</header>

			<!-- Menu -->
			<nav id="menu">
				<h2>Menu</h2>
				<ul>
					<li>@Html.ActionLink("Inicio", "Index", "Home")</li>
					<li>@Html.ActionLink("Agregar socios a organización", "PublicTransportGroupList", "Driver")</li>
					<li>@Html.ActionLink("Agregar organización", "Add", "PublicTransportGroup")</li>
					<li>@Html.ActionLink("Modificar organización", "PublicTransportGroupList", "PublicTransportGroup")</li>
					<li>@Html.ActionLink("Socios/Transportistas", "Index", "Driver")</li>
					<li>@Html.ActionLink("Salir", "Login", "Security")</li>
				</ul>
			</nav>

			<!-- Main -->
			<div id="main">
				<div class="inner">
					<!-- Form -->
					<section>
						<h1 style="color:#4cbece">Modificar socio</h1>
						<label>Organización: @Model.PTGCompleteName</label>
						<br />
						<label>Cupo: @ViewBag.Partners</label>
						<br />
						<br />
						<br />
						<div class="row gtr-uniform">
							<div class="col-6">
								<strong>Cédula:</strong>
								@Html.HiddenFor(x => x.PTGCompleteName)
								@Html.HiddenFor(x => x.DriverId)
								@Html.HiddenFor(x => x.PublicTransportGroupId)
								@Html.TextBoxFor(x => x.DriverIdentityDocument, new { placeholder = "Cédula", tabindex = "0", maxlength = "8" })
								<span asp-validation-for="DriverIdentityDocument" class="text-danger"></span>
							</div>
							<div class="col-6 col-12-xsmall">
								<strong>Nombre:</strong>
								@Html.TextBoxFor(x => x.DriverFullName, new { placeholder = "Nombre del socio", tabindex = "0", maxlength = "20" })
							</div>
							<div class="col-6">
								<strong>Sexo:</strong>
								@Html.DropDownListFor(t => t.SexId, (SelectList)ViewBag.Sex, "-- Seleccione --", new { @class = "form-control" })
							</div>
							<div class="col-6">
								<strong>Fecha de nacimiento:</strong>
								@Html.TextBox("Birthdate", Model.Birthdate.ToString("dd/MM/yyyy"), new { maxlength = "20" })
							</div>
							<div class="col-6">
								<strong>Número de Socio:</strong>
								@Html.TextBoxFor(x => x.PartnerNumber, new { placeholder = "Número de socio", maxlength = "3" })
								<span asp-validation-for="PartnerNumber" class="text-danger"></span>
							</div>
							<div class="col-6">
								<strong>Teléfono:</strong>
								@Html.TextBoxFor(x => x.DriverPhone, new { placeholder = "Teléfono del socio", maxlength = "11" })
								<span asp-validation-for="DriverPhone" class="text-danger"></span>
							</div>
							<div class="col-12">
								<ul class="actions">
									@{
										if (ViewBag.IsTotalAccess)
										{
											<li><button type="submit" id="saveRequest" class="primary">Modificar</button></li>
										}
									}									
								</ul>
							</div>
						</div>
					</section>
				</div>
			</div>
		</div>
	}
	<!-- Scripts -->
	<script src="~/assets/js/jquery.min.js"></script>
	<script src="~/assets/js/browser.min.js"></script>
	<script src="~/assets/js/breakpoints.min.js"></script>
	<script src="~/assets/js/util.js"></script>
	<script src="~/assets/js/main.js"></script>
	<script src="~/js/common.js" asp-append-version="true"></script>

	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	@* Air DatePicker ******************************************************************************* *@
	<script src="~/plugins/airdatepicker/air-datepicker.min.js"></script>
	@* *********************************************************************************************** *@

	<script type="text/javascript">

		document.addEventListener("DOMContentLoaded", function() {
			new AirDatepicker('#Birthdate', {
				dateFormat: 'dd/MM/yyyy',
				locale: {
					days: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
					daysShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'],
					daysMin: ['D', 'L', 'M', 'Mi', 'J', 'V', 'S'],
					months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
					monthsShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
					today: 'Hoy',
					clear: 'Borrar',
					dateFormat: 'dd/MM/yyyy',
					firstDay: 1
				},
				autoClose: true,
				minDate: new Date(2000, 0, 1),
				maxDate: new Date(2050, 11, 31)
			});
		});

		document.addEventListener("DOMContentLoaded", function() {
			var input = document.getElementById("Birthdate");

			input.addEventListener("change", function() {
				var regex = /^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0-2])\/[0-9]{4}$/;
				if (!regex.test(this.value)) {
					alert("Formato de fecha inválido, debe ser DD/MM/YYYY.");
					this.value = "";
				}
			});
		});

		document.addEventListener("DOMContentLoaded", function () {
			function handleInput(selector, transformFunction) {
				const inputElement = document.querySelector(selector);
				if (inputElement) {
					inputElement.addEventListener("input", function () {
						const start = inputElement.selectionStart;
						const end = inputElement.selectionEnd;

						const transformed = transformFunction(inputElement.value);

						if (inputElement.value !== transformed) {
							inputElement.value = transformed;
							inputElement.setSelectionRange(start, end);
						}
					});
				}
			}

			handleInput("[name='DriverIdentityDocument']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});

			handleInput("[name='DriverFullName']", sanitizeInputValue);

			handleInput("[name='PartnerNumber']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});

			handleInput("[name='DriverPhone']", function (value) {
				return value.replace(/[^0-9]/g, "");
			});
		});

		$("body").on("click", "#saveRequest", function (event) {
			event.preventDefault();

			if (!isOkToSave()) return false;

			if (!confirm("¿Está seguro de que desea actualizar los registros?")) return false;

			$(this).closest("form").trigger("submit");
		});


		$("form").on("submit", function (e) {
			e.preventDefault();

			if ($(this).valid()) {
				let paramValue2 = $('#PublicTransportGroupId').val();
				let paramValue4 = $('#PartnerNumber').val();
				let paramValue5 = $('#DriverId').val();
				let pTGCompleteName = $('#PTGCompleteName').val();

				let checkExistingUrl = '@Url.Action("CheckExistingValuesOnEdit", "Driver")';
				let editUrl = '@Url.Action("EditWithAjax", "Driver")';
				let redirectToAddBase = '@Url.Action("Add", "Driver")';

				$.ajax({
					url: checkExistingUrl,
					data: {
						paramValue2,
						paramValue4,
						paramValue5
					},
					success: function (response) {
						if (response.redirectUrl) {
							showMsg(response.message || "Redireccionando...");
							setTimeout(function () {
								window.location.href = response.redirectUrl;
							}, 1000);
							return;
						}

						if (response.canContinue) {
							let formData = $("form").serialize();

							$.ajax({
								url: editUrl,
								type: 'POST',
								data: formData,
								success: function (data) {
									if (data.redirectUrl) {
										showMsg(data.message || "Datos actualizados correctamente");
										window.location.href = data.redirectUrl
									} else {
										showMsg(data.message || "Datos actualizados correctamente");
										window.location.href = `${redirectToAddBase}?publicTransportGroupId=${paramValue2}&pTGCompleteName=${encodeURIComponent(pTGCompleteName)}`;
									}
								}
							});
						} else {
							showMsg(response.message);
						}
					}
				});
			}
		});

		function isOkToSave() {
			let firstInvalidField = null;
			let message = "";

			if ($("#DriverIdentityDocument").val() == "" && !firstInvalidField) {
				firstInvalidField = "#DriverIdentityDocument";
				message = "Debe colocar la cédula del socio";
			}

			if (!firstInvalidField) {
				const identityValue = $("#DriverIdentityDocument").val();

				if (identityValue == "" || identityValue.length < 7) {
					firstInvalidField = "#DriverIdentityDocument";
					message = "Debe colocar un número de cédula válido";
				}
			}

			if ($("#DriverFullName").val() == "" && !firstInvalidField) {
				firstInvalidField = "#DriverFullName";
				message = "Debe colocar el nombre del socio";
			} else {
				const driverFullName = $("#DriverFullName").val().trim();
				const regex = /^[a-zA-ZñÑ\s]{5,}$/;

				if (!regex.test(driverFullName)) {
					if (!firstInvalidField) {
						firstInvalidField = "#DriverFullName";
					}
					message = "El nombre debe contener solo letras y espacios, y al menos 5 caracteres.";
				}
			}

			if ($("#SexId").val() == ""  &&  !firstInvalidField) {
				firstInvalidField = "#SexId";
				message = "Debe indicar el sexo";
			}

			if ($("#Birthdate").val() == ""  &&  !firstInvalidField) {
				firstInvalidField = "#Birthdate";
				message = "Debe indicar la fecha de nacimiento";
			}

			if ($("#PartnerNumber").val() != "" &&  $("#PartnerNumber").val() == "0" && !firstInvalidField) {
				firstInvalidField = "#PartnerNumber";
				message = "El número de socio no puede ser cero";
			}

			if ($("#PartnerNumber").val() == "" && !firstInvalidField) {
				firstInvalidField = "#PartnerNumber";
				message = "Debe colocar el número de socio";
			}

			if ($("#RepresentativePhone").val() == "" && !firstInvalidField) {
				firstInvalidField = "#RepresentativePhone";
				message = "Debe colocar el número de teléfono del representante";
			}

			if (!firstInvalidField) {
				const identityValue = $("#DriverPhone").val();

				if (identityValue == "" || identityValue.length < 11) {
					firstInvalidField = "#DriverPhone";
					message = "Debe colocar un número de télefono válido";
				}
			}

			if (firstInvalidField) {
				showAlert(message, firstInvalidField);
				return false;
			}

			return true;
		}

		function showAlert(message, selector) {
			alert(message);
			highlightErrorField(selector);
			$(selector).focus();
		}

		function highlightErrorField(selector) {
			$(selector).addClass("is-invalid");
			$(selector).on("input", function () {
				$(this).removeClass("is-invalid");
			});

			$(selector)[0].scrollIntoView({ behavior: "smooth", block: "center" });
		}

		function showMsg(hasCurrentJob) {
			if (hasCurrentJob != "OK") {
				alert(hasCurrentJob);
				return false;
			} else {

				$("form").unbind('submit').submit();
			}
		}

		$(document).ready(function () {
			setTimeout(function(){
				$("#successMessage").fadeOut("slow");
			}, 2500);
		});
	</script>
</body>
</html>