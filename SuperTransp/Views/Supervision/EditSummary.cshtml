@model SuperTransp.Models.SupervisionSummaryViewModel
@{
	Layout = "";
}
<!DOCTYPE HTML>
<html>
<head>
	<title>Modificar Resumen de Supervisión</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
	<link rel="stylesheet" href="~/assets/css/main.css" />
	<noscript><link rel="stylesheet" href="~/assets/css/noscript.css" /></noscript>
	<link rel="stylesheet" href="~/datatable/css/bootstrap.css" />
	<link rel="icon" type="image/x-icon" href="~/images/Logo.ico" />

	@* Air DatePicker ******************************************************************************* *@
    <link href="~/plugins/airdatepicker/air-datepicker.min.css" rel="stylesheet" />
	@* *************************************************************************************************** *@

	@* DropZone************************************************************************************ *@
	<link href="~/plugins/dropzone/dropzone.min.css" rel="stylesheet" />
	@* ************************************************************************************ *@


	<style>
		.is-invalid {
			border: 2px solid red;
			background-color: #ffe6e6;
		}

		.custom-textarea {
			border: 2px solid;
			height: 100px !important;
		}
	</style>
</head>
<body class="is-preload">
	@using (Html.BeginForm("EditSummary", "Supervision", FormMethod.Post))
	{
		@Html.AntiForgeryToken()
		<!-- Wrapper -->
		<div id="wrapper">

			<!-- Header -->
			<header id="header">
				<div class="inner">

					<!-- Logo -->
					<a href="#" class="logo">
						<span><img src="~/images/Logo.png" width="100px" height="100px" alt="" /></span>
						<br />
						<span class="title">@ViewBag.EmployeeName</span>
						<br />
						@if (TempData["SuccessMessage"] != null)
						{
							<div id="successMessage" class="alert alert-success">
								@TempData["SuccessMessage"]
							</div>
						}
					</a>
				</div>
				<!-- Nav -->
				<nav>
					<ul>
						<li><a href="#menu">Menu</a></li>
					</ul>
				</nav>
			</header>

			<!-- Menu -->
			<nav id="menu">
				<h2>Menu</h2>
				<ul>
					<li>@Html.ActionLink("Inicio", "Index", "Home")</li>
					<li>@Html.ActionLink("Seleccionar organización para modificar resumen", "SummaryList", "Supervision")</li>
					<li>@Html.ActionLink("Seleccionar organización para hacer resumen", "PublicTransportGroupList", "Supervision")</li>
					<li>@Html.ActionLink("Supervisión", "Index", "Supervision")</li>
					<li>@Html.ActionLink("Salir", "Login", "Security")</li>
				</ul>
			</nav>

			<!-- Main -->
			<div id="main">
				<div class="inner">
					<!-- Form -->
					<section>
						<h1 style="color:#4cbece">Modificar Resumen de Supervisión</h1>
						<label>Organización: @Model.PTGCompleteName</label>
						<br />
						<br />
						<br />
						<div class="row gtr-uniform">
							<div class="col-8">
								<strong>Fecha de la supervisión:</strong>
								@Html.HiddenFor(x => x.PTGCompleteName)
								@Html.HiddenFor(x => x.PublicTransportGroupId)
								@Html.HiddenFor(x => x.PublicTransportGroupRif)
								@Html.HiddenFor(x => x.SupervisionSummaryId)
								@Html.HiddenFor(x => x.SecurityUserId)
								@Html.HiddenFor(x => x.StateName)
								@Html.TextBox("SupervisionDate", Model.SupervisionDate.ToString("dd/MM/yyyy"), new { maxlength = "20" })
								@for (int i = 0; i < Model.Pictures.Count; i++)
								{
									<input type="hidden" name="Pictures[@i]" value="@Model.Pictures[i]" />
								}
							</div>
							<div class="col-12">
								<br />
								<strong>Dirección:</strong>
								@Html.TextAreaFor(x => x.SupervisionAddress, new
									{
										@class = "custom-textarea",
										placeholder = "Dirección",
										maxlength = "150"
									})
							</div>
							<div class="col-12">
								<br />
								<strong>Observaciones:</strong>
								@Html.TextAreaFor(x => x.SupervisionSummaryRemarks, new
									{
										@class = "custom-textarea",
										placeholder = "Observaciones",
										maxlength = "150"
									})
							</div>
@* 							<div class="col-12">
								<br />
								<strong>Cargar imagenes:</strong>
								<div id="myDropzone" class="dropzone dz-clickable">
									<div class="dz-message">
										Arrastre las imagenes aquí o haga clic para subirlas.
									</div>
								</div>
							</div> *@
							<div class="col-12">
								<br />
								<strong>Imagenes o PDF:</strong>
								<div id="thumbnail-container"></div>
							</div>
							<div class="col-12">
								<ul class="actions">
									@{
										if (ViewBag.IsTotalAccess)
										{
											<li><button type="submit" id="saveRequest" class="primary">Modificar resumen</button></li>
										}
									}									
								</ul>
							</div>
						</div>
					</section>
				</div>
			</div>
		</div>
	}
	<!-- Scripts -->
	<script src="~/assets/js/jquery.min.js"></script>
	<script src="~/assets/js/browser.min.js"></script>
	<script src="~/assets/js/breakpoints.min.js"></script>
	<script src="~/assets/js/util.js"></script>
	<script src="~/assets/js/main.js"></script>

	@* Air DatePicker ******************************************************************************* *@
    <script src="~/plugins/airdatepicker/air-datepicker.min.js"></script>
	@* *********************************************************************************************** *@

	@* DropZone************************************************************************************ *@
	<script src="~/plugins/dropzone/dropzone.min.js"></script>
	@* ************************************************************************************ *@

	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script type="text/javascript">

		const fileUrls = @Html.Raw(Json.Serialize(Model.Pictures.Select(p => p.SupervisionSummaryPictureUrl)));
		const container = document.getElementById('thumbnail-container');

		function isImage(url) {
			return /\.(jpg|jpeg|png|gif|bmp|webp)$/i.test(url);
		}

		function getFileName(url) {
			return url.split('/').pop();
		}

		fileUrls.forEach(url => {
			const element = document.createElement('div');
			element.style.display = 'inline-block';
			element.style.margin = '5px';
			element.style.cursor = 'pointer';

			if (isImage(url)) {
				const img = document.createElement('img');
				img.src = url;
				img.alt = 'Thumbnail';
				img.style.width = '100px';
				img.style.height = 'auto';

				element.appendChild(img);
			} else if (/\.pdf$/i.test(url)) {
				const pdfIcon = document.createElement('img');
				pdfIcon.src = '@Url.Content("~/images/pdf-icon.png")';
				pdfIcon.alt = 'PDF';
				pdfIcon.style.width = '100px';
				pdfIcon.style.height = 'auto';
				pdfIcon.title = getFileName(url);

				element.appendChild(pdfIcon);
			}

			element.addEventListener('click', () => {
				window.open(url, '_blank');
			});

			container.appendChild(element);
		});

		document.addEventListener("DOMContentLoaded", function() {
			new AirDatepicker('#SupervisionDate', {
				dateFormat: 'dd/MM/yyyy',
				locale: {
					days: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
					daysShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'],
					daysMin: ['D', 'L', 'M', 'Mi', 'J', 'V', 'S'],
					months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
					monthsShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
					today: 'Hoy',
					clear: 'Borrar',
					dateFormat: 'dd/MM/yyyy',
					firstDay: 1
				},
				autoClose: true,
				minDate: new Date(2000, 0, 1),
				maxDate: new Date(2050, 11, 31)
			});
		});

		document.addEventListener("DOMContentLoaded", function() {
			var input = document.getElementById("SupervisionDate");

			input.addEventListener("change", function() {
				var regex = /^(0[1-9]|[12][0-9]|3[01])\/(0[1-9]|1[0-2])\/[0-9]{4}$/;
				if (!regex.test(this.value)) {
					alert("Formato de fecha inválido, debe ser DD/MM/YYYY.");
					this.value = "";
				}
			});
		});

		document.addEventListener("DOMContentLoaded", function () {
			function handleInput(selector, transformFunction) {
				var inputElement = document.querySelector(selector);
				if (inputElement) {
					inputElement.addEventListener("input", function () {
						inputElement.value = transformFunction(inputElement.value);
					});
				}
			}

			handleInput("[name='SupervisionAddress']", function (value) {
				return value.toUpperCase();
			});

			handleInput("[name='SupervisionSummaryRemarks']", function (value) {
				return value.toUpperCase();
			});
		});

		// Dropzone.autoDiscover = false;
		// var saveFilesUrl = '@Url.Action("SaveSummaryFiles", "Supervision")';
		// const stateName = '@Model.StateName';
		// const driverIdentityDocument = document.querySelector('[name="PublicTransportGroupId"]').value;
		// const partnerNumber = '@Model.PublicTransportGroupId';
		// const publicTransportGroupRif = '@Model.PublicTransportGroupRif';

		// const dropzone = new Dropzone("#myDropzone", {
		// 	url: saveFilesUrl,
		// 	autoProcessQueue: true,
		// 	paramName: "file",
		// 	maxFilesize: 20,
		// 	acceptedFiles: ".jpg,.png",
		// 	dictDefaultMessage: "Arrastra las imágenes aquí o haga clic para agregarlas.",
		// 	addRemoveLinks: true,

		// 	params: {
		// 		stateName: stateName,
		// 		driverIdentityDocument: driverIdentityDocument,
		// 		partnerNumber: partnerNumber,
		// 		publicTransportGroupRif: publicTransportGroupRif
		// 	},

		// 	init: function () {
		// 		this.on("addedfile", function (file) {
		// 			console.log("Archivo agregado:", file);
		// 		});

		// 		this.on("removedfile", function (file) {
		// 			console.log("Archivo eliminado:", file);
		// 		});

		// 		this.on("error", function (file, errorMessage) {
		// 			console.log("Hubo un error al subir la imagen: " + errorMessage);
		// 		});

		// 		this.on("queuecomplete", function () {
		// 			alert("Todas las imágenes han sido cargadas correctamente.");
		// 		});
		// 	}
		// });


		$("body").on("click", "#saveRequest", function (event) {
			event.preventDefault();

			if (!isOkToSave()) {
				return false;
			}

			if (!confirm("¿Está seguro de que desea actualizar los registros?")) {
				return false;
			}

			$(this).closest("form").trigger("submit");
		});

		// $("form").on("submit", function (e) {
		// 	e.preventDefault();

		// 	if ($(this).valid()) {
		// 		var paramValue2 = $('#PublicTransportGroupId').val();
		// 		var paramValue4 = $('#PartnerNumber').val();
		// 		var checkExistingUrl = '@Url.Action("CheckExistingValues", "Driver")';
		// 		$.ajax({
		// 			url: checkExistingUrl,
		// 			data: {
		// 				paramValue2: paramValue2,
		// 				paramValue4: paramValue4
		// 			},
		// 			success: function (data) {
		// 				showMsg(data);
		// 			},
		// 			cache: false
		// 		});
		// 	}
		// });

		function isOkToSave() {
			let firstInvalidField = null;
			let message = "";

			if ($("#SupervisionAddress").val() == "" && !firstInvalidField) {
				firstInvalidField = "#SupervisionAddress";
				message = "Debe colocar la dirección donde tuvo lugar la supervisión";
			}

			if ($("#SupervisionSummaryRemarks").val() == "" && !firstInvalidField) {
				firstInvalidField = "#SupervisionSummaryRemarks";
				message = "Debe colocar las observaciones";
			}

			if (firstInvalidField) {
				showAlert(message, firstInvalidField);
				return false;
			}

			return true;
		}

		function showAlert(message, selector) {
			alert(message);
			highlightErrorField(selector);
			$(selector).focus();
		}

		function highlightErrorField(selector) {
			$(selector).addClass("is-invalid");
			$(selector).on("input", function () {
				$(this).removeClass("is-invalid");
			});

			$(selector)[0].scrollIntoView({ behavior: "smooth", block: "center" });
		}

		function showMsg(hasCurrentJob) {
			if (hasCurrentJob != "OK") {
				alert(hasCurrentJob);
				return false;
			} else {

				$("form").unbind('submit').submit();
			}
		}

		$(document).ready(function () {
			setTimeout(function(){
				$("#successMessage").fadeOut("slow");
			}, 2500);;

			$('#SupervisionDate').on('keydown', function (e) {
				if (e.key === "Enter") {
					e.preventDefault();
					return false;
				}
			});

			$('#SupervisionAddress').on('input', function() {
				const value = $(this).val();
				const sanitizedValue = value.replace(/[^a-zA-Z0-9\s]/g, '');
				$(this).val(sanitizedValue);
			});

			$('#SupervisionSummaryRemarks').on('input', function() {
				const value = $(this).val();
				const sanitizedValue = value.replace(/[^a-zA-Z0-9\s]/g, '');
				$(this).val(sanitizedValue);
			});
		});
	</script>
</body>
</html>


