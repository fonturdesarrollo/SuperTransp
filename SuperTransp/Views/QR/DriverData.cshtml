@using SuperTransp.Extensions
@model SuperTransp.Models.SupervisionViewModel
@{
	Layout = "";
}
<!DOCTYPE HTML>
<html>
<head>
	<title>Socio</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
	<link rel="stylesheet" href="~/assets/css/main.css" />
	<noscript><link rel="stylesheet" href="~/assets/css/noscript.css" /></noscript>
	<link rel="stylesheet" href="~/datatable/css/bootstrap.css" />
	<link rel="icon" type="image/x-icon" href="~/images/Logo.ico" />

	<style>
		.is-invalid {
			border: 2px solid red;
			background-color: #ffe6e6;
		}
	</style>
</head>
<body class="is-preload">	
	<!-- Wrapper -->
	<div id="wrapper">

		<!-- Header -->
		<header id="header">
			<div class="inner">

				<!-- Logo -->
				<a href="#" class="logo">
					<span ><img src="~/images/Logo.png" width="100px" height="100px" alt=""/></span><span class="title"></span>
				</a>
			</div>
		</header>

		<!-- Main -->
		<div id="main">
			<div class="inner">
				<!-- Form -->
				<section>
					<h1 style="color:#4cbece">Socio</h1>
					<br />
					@Html.HiddenFor(x => x.Pictures)
					<div class="row gtr-uniform">
						<div class="col-6">
							<strong>RIF:</strong>
							@Model.PublicTransportGroupRif
						</div>

						<div class="col-12">
							<strong>Organización:</strong>
							@Model.PTGCompleteName
						</div>
						<div class="col-12">
							<strong>Cedula:</strong>
							@Model.DriverIdentityDocument
						</div>

						<div class="col-12">
							<strong>Nombre Socio:</strong>
							@Model.DriverFullName
						</div>
						<div class="col-12">
							<strong>N° Socio:</strong>
							@Model.PartnerNumber
						</div>
						@{
							if (Model.SupervisionStatus != null && (bool)Model.SupervisionStatus)
							{
								<div class="col-12">
									<strong>Estatus:</strong>
									SUPERVISADO
								</div>
								<div class="col-12">
									<strong>Fecha supervisión:</strong>
									@Model.SupervisionDateAdded.ToString("dd/MM/yyyy")
								</div>
								<div class="col-12">
									<strong>Con vehículo:</strong>
									@Model.DriverWithVehicle.ToSpanishYesNo()
								</div>
								<div class="col-12">
									<strong>Presente:</strong>
									@Model.InPerson.ToSpanishYesNo()
								</div>
								if (@Model.DriverWithVehicle)
								{
									<div class="col-12">
										<strong>Placa:</strong>
										@Model.Plate
									</div>
									<div class="col-12">
										<strong>Año:</strong>
										@Model.Year
									</div>
									<div class="col-12">
										<strong>Marca:</strong>
										@Model.Make
									</div>
									<div class="col-12">
										<strong>Marca:</strong>
										@Model.Model
									</div>
									if(!string.IsNullOrEmpty(Model.Remarks))
									{
										<div class="col-12">
											<strong>Observaciones:</strong>
											@Model.Remarks
										</div>
									}
									<div class="col-12">
										<strong>Imágenes:</strong>
										<br />
										<div id="thumbnail-container"></div>
									</div>																
								}
							}
							else
							{
								<div class="col-6">
									<strong>Estatus:</strong>
									PENDIENTE POR SUPERVISION
								</div>
							}
						}
						<div class="col-12">
							<ul class="actions">					
								<li><label id="ValidCode">@ViewBag.AllowedHash</label></li>
							</ul>
						</div>
					</div>
				</section>
			</div>
		</div>
	</div>
</body>
</html>
<script type="text/javascript">
	const fileUrls = @Html.Raw(Json.Serialize(Model.Pictures.Select(p => p.VehicleImageUrl)));
	const container = document.getElementById('thumbnail-container');

	function isImage(url) {
		return /\.(jpg|jpeg|png|gif|bmp|webp)$/i.test(url);
	}

	function getFileName(url) {
		return url.split('/').pop();
	}

	fileUrls.forEach(url => {
		const element = document.createElement('div');
		element.style.display = 'inline-block';
		element.style.margin = '5px';
		element.style.cursor = 'pointer';

		if (isImage(url)) {
			const img = document.createElement('img');
			img.src = url;
			img.alt = 'Thumbnail';
			img.style.width = '100px';
			img.style.height = 'auto';

			element.appendChild(img);
		} else if (/\.pdf$/i.test(url)) {
			const pdfIcon = document.createElement('img');
			pdfIcon.src = '@Url.Content("~/images/pdf-icon.png")';
			pdfIcon.alt = 'PDF';
			pdfIcon.style.width = '100px';
			pdfIcon.style.height = 'auto';
			pdfIcon.title = getFileName(url);

			element.appendChild(pdfIcon);
		}

		element.addEventListener('click', () => {
			window.open(url, '_blank');
		});

		container.appendChild(element);
	});
</script>